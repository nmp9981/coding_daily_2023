#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int inf = 99999999;
const int maxi = 101;
vector<pair<int,int>> graph[maxi];//노드, 거리
int dist[maxi];

//초기화
void init(){
    for(int i=0;i<maxi;i++) dist[i] = inf;
}
//다익스트라
int Dijk(int start,int end){
    dist[start] = 0;
    priority_queue<pair<int,int>> pq;//거리, 노드
    pq.push({0,start});
    
    while(!pq.empty()){
        int curDist = -pq.front().first;
        int curNode = pq.front().second;
        pq.pop();
        
        if(dist[curNode] < curDist) continue;
        
        for(int i=0;i<graph[curNode].size();i++){
            int nextNode = graph[curNode][i].first;
            int nextDist = graph[curNode][i].second;
            
            if(dist[nextNode] > curDist+nextDist){
                dist[nextNode] = curDist+nextDist;
                pq.push({-dist[nextNode],nextNode});
            }
        }
    }
    return dist[end];
}
int main()
{
    init();//초기화
    Dijk(0,10);
    return 0;
}
